{"name":"Social-cms-backend","tagline":"Express middleware to provide schema-less REST APIs for creating a social networking website primarily using angular.js. It comes with built-in authentication, authorization and notification features.","body":"social-cms-backend\r\n==================\r\n\r\nExpress middleware to provide schema-less REST APIs for creating a social networking website primarily using angular.js. It comes with built-in authentication, authorization and notification features.\r\n\r\nMotivation\r\n----------\r\n\r\nThere exists several MVC framework libraries for node.js\r\nthat are inspired by Rails.  But they might be a bit outdated,\r\nwhen it comes to angular.js, client-side MVW framework.\r\nI would like to propose a maybe new style of web programming,\r\nwhich is the combination of a domain-specific REST API library\r\n(ready to use, no coding required) and client-side coding.\r\n\r\nThis project is to provide such a library for a web site\r\nlike SNS/Twitter/Facebook in a closed/private environment.\r\n\r\nHow to install\r\n--------------\r\n\r\n    $ npm install social-cms-backend\r\n\r\nExamples\r\n--------\r\n\r\nThe followings are minimal example code that uses social-cms-backend.\r\n\r\n- [auth-local](https://github.com/dai-shi/social-cms-backend/examples/auth-local/) --- Simple BBS with local authentication\r\n- [digest-and-following](https://github.com/dai-shi/social-cms-backend/examples/digest-and-following/) --- An example app using digest auth and following feature (w/ socket.io)\r\n\r\nScreencast\r\n----------\r\n\r\n### How to create a Twitter clone in 15 minutes\r\n\r\nScreencast preview (quadruple speed):\r\n\r\n![Preview](http://dai-shi.github.io/social-cms-backend/ttyrecord.gif)\r\n\r\n<a href=\"http://dai-shi.github.io/social-cms-backend/ttyplay.html\" target=\"_blank\">Controllable screencast at normal speed</a>\r\n\r\nNotes:\r\n\r\n* There is a typo found after the recording.\r\n  `/javascript/main.js -> /javascripts/main.js`\r\n* The resulting code is available\r\n  [here](https://github.com/dai-shi/twitter-clone-sample/tree/20130804_recorded)\r\n* You can try the running web service of the code\r\n  <a href=\"http://twitterclonesample-nodeangularapp.rhcloud.com/\" target=\"_blank\">here</a>\r\n\r\nHow to use\r\n----------\r\n\r\n### Minimal configuration with local authentication\r\n\r\n    var express = require('express');\r\n    var SCB = require('social-cms-backend');\r\n    var app = express();\r\n    app.use(SCB.middleware({\r\n      mongodb_url: 'mongodb://localhost:27017/socialcmsdb',\r\n      passport_strategy: 'local'\r\n    }));\r\n    app.listen(3000);\r\n\r\n### Typical configuration with Facebook authentication:\r\n\r\n    var express = require('express');\r\n    var SCB = require('social-cms-backend');\r\n    var app = express();\r\n    app.use(SCB.middleware({\r\n      mongodb_url: 'mongodb://localhost:27017/socialcmsdb',\r\n      passport_strategy: 'facebook',\r\n      facebook_app_id: process.env.FACEBOOK_APP_ID,\r\n      facebook_app_secret: process.env.FACEBOOK_APP_SECRET\r\n    }));\r\n    app.listen(3000);\r\n\r\nNotice two environment variables which have to be obtrained from <https://developers.facebook.com/> and set properly. Refer [Facebook Doc](https://developers.facebook.com/docs/apps/register) for more information.\r\n\r\n### Configuration with socket.io v1.0:\r\n\r\n    var http = require('http');\r\n    var express = require('express');\r\n    var socket_io = require('socket.io');\r\n    var expressSession = require('express-session');\r\n    var SCB = require('social-cms-backend');\r\n    var app = express();\r\n    var SCB_options = {\r\n      mongodb_url: 'mongodb://localhost:27017/socialcmsdb',\r\n      session_middleware: expressSession({\r\n        secret: process.env.SESSION_SECRET,\r\n        resave: false,\r\n        saveUninitialized: true\r\n      }),\r\n      passport_strategy: 'facebook',\r\n      facebook_app_id: process.env.FACEBOOK_APP_ID,\r\n      facebook_app_secret: process.env.FACEBOOK_APP_SECRET\r\n    };\r\n    app.use(SCB.middleware(SCB_options));\r\n    var server = http.createServer(app);\r\n    var sio = socket_io(server);\r\n    sio.use(SCB.socket_io(SCB_options));\r\n    server.listen(3000);\r\n\r\n### Configuration for HTTP DIGEST strategy:\r\n\r\n    var SCB_options = {\r\n      mongodb_url: 'mongodb://localhost:27017/socialcmsdb',\r\n      passport_strategy: 'digest',\r\n      auth_digest: {\r\n        realm: 'my_realm'\r\n      }\r\n    };\r\n\r\n### Configuration with BreezeJS support:\r\n\r\n    var SCB_options = {\r\n      mongodb_url: 'mongodb://localhost:27017/socialcmsdb',\r\n      breeze_mongo: true,\r\n      routes: [{\r\n        object_type: 'user',\r\n        object_prefix: '/breeze-service/users'\r\n      }, {\r\n        object_type: 'post',\r\n        object_prefix: '/breeze-service/posts'\r\n      }, {\r\n        object_prefix: '/breeze-service/SaveChanges'\r\n      }]\r\n    };\r\n\r\n\r\nLogin APIs\r\n----------\r\n\r\nThe login API for Facebook authenticate is the following:\r\n\r\n    GET /login/facebook\r\n\r\nTypically, the HTML would look like this:\r\n\r\n    <a href=\"/login/facebook\">Login</a>\r\n\r\nIn the case of DIGEST authentication, the API is:\r\n\r\n    GET /login/digest\r\n\r\nThe way to create a user for DIGEST authentication is:\r\n\r\n    POST /adduser/digest\r\n    Content-Type: application/json\r\n    Content-Length: ...\r\n    \r\n    {\"name\":\"...\",\"passhash\":\"...\",\"initdata\":\"{...}\"}\r\n\r\n\r\nREST APIs\r\n---------\r\n\r\nBy default, there are 4 object types:\r\n* user\r\n* group\r\n* post\r\n* like\r\n\r\nThe following is the example of the post object endpoint.\r\n\r\n### List post objects\r\n\r\n    GET /posts?query=...\r\n\r\nThe \"query\" query parameter is a MongoDB query parameter object\r\nthat is stringified (probably by JSON.stringify).\r\n* `skip` and `limit` query parameters are also supported.\r\n\r\n### Get one post object\r\n\r\n    GET /posts/123\r\n\r\nThe \"123\" is the `_id` of the post.\r\n\r\n### Save a new post\r\n\r\n    POST /posts\r\n\r\nThe body is an object (JSON format) without system preserved properties such as\r\n`_id`, `system`, `created_time`, `owner`, `meta`.\r\n\r\n### Update a post\r\n\r\n    PUT /posts/123\r\n\r\nThe body is a MongoDB update object (JSON format) using update operators.\r\n\r\n### Delete a post\r\n\r\n    DELETE /posts/123\r\n\r\n### Count posts\r\n\r\n    GET /posts/count?query=...\r\n\r\nThis is a special endpoint.\r\n\r\n### Get following posts\r\n\r\n    GET /posts/inbox\r\n\r\nThis is a special endpoint to only get posts that matches with predefined \"following\".\r\nMore description follows in the next section.\r\n\r\n### Aggregate Posts\r\n\r\n    GET /posts/aggregate?pipeline=...\r\n\r\nThis is a special endpoint to use MongoDB aggregate command.\r\nThe \"pipeline\" query parameter is a MongoDB pipeline parameter object\r\nthat is stringified (probably by JSON.stringify).\r\n\r\nUser and Group\r\n--------------\r\n\r\nUser objects can also be accessed by REST API.\r\nFor example, all user list can be fetched by\r\n\r\n    GET /users\r\n\r\nunless othrewise restricted.\r\n\r\nTo get login user information, use this special endpoint.\r\n\r\n    GET /users/myself\r\n\r\nTo create a group, save a group object like the following:\r\n\r\n    {\r\n      members: [\r\n        { user_id: 111 },\r\n        { user_id: 112 },\r\n        { user_id: 113 }\r\n      ]\r\n    }\r\n\r\nThe `user_id` is the `_id` attribute of a user object.\r\n\r\nYou can also define nested groups like the following:\r\n\r\n    {\r\n      members: [\r\n        { user_id: 111 },\r\n        { group_id: 211 },\r\n        { group_id: 212 }\r\n      ]\r\n    }\r\n\r\nThe `group_id` is the `_id` attribute of a group object.\r\n\r\nAccess Control\r\n--------------\r\n\r\nObject read permission is handled by the `scope` attribute.\r\nFor example, if an object has the `scope` like this,\r\n\r\n    {\r\n      data: { ... },\r\n      scope: [\r\n        { user_id: 111 },\r\n        { group_id: 211 }\r\n      ]\r\n    }\r\n\r\nthis object can only be accessed by the user `user_id=111` and\r\nall members of the group `group_id=211`.\r\nNotice `data` attribute is just an example.\r\n\r\nObject write permission is based on ownership,\r\nwhich means an object can only be updated by the user who first saved.\r\n\r\nThese access control can be customized by `hasPermission` SCB option.\r\n\r\nFollowings and Followers\r\n------------------------\r\n\r\nThere is a special endpoint `inbox`.\r\nif an object has `destination` property and if a user follows\r\nthat destination, that object is added to the user `inbox`.\r\nFor example, suppose a user with `user_id=111` follows\r\nanother user with `user_id=112`, a user object will be\r\n\r\n    {\r\n      _id: 111,\r\n      following: [{\r\n        user_id: 112\r\n      }]\r\n    }\r\n\r\nand if an object has `destination` like the following\r\n\r\n    {\r\n      destination: [{\r\n        user_id: 112\r\n      }]\r\n    }\r\n\r\nthe user with `user_id=111` will see this object in one's own `inbox`.\r\n\r\nA user can also follow a group, in this case the user object would look\r\nlike the following.\r\n\r\n    {\r\n      _id: 111,\r\n      following: [{\r\n        group_id: 211\r\n      }]\r\n    }\r\n\r\nThere is an SCB option `always_follow_myself` and if it is `true`,\r\nit is equivalent to having a user `user_id=111` object like\r\n\r\n    {\r\n      _id: 111,\r\n      following: [{\r\n        user_id: 111\r\n      }]\r\n    }\r\n\r\nfor all users.\r\n\r\nPush by socket.io\r\n-----------------------------\r\n\r\nIf an object has a `destination` property and a user follows it,\r\nthe server pushes the object to to the user by socket.io,\r\nif socket.io is configured properly (See the example in \"How To Use\").\r\n\r\nFor example, if a \"post\" object like the following is inserted;\r\n\r\n    {\r\n      destination: [{\r\n        group_id: 211\r\n      }]\r\n    }\r\n\r\nall the users who follow `group_id=211` will receive the whole object\r\nas a message identified by `new-post`.\r\nSo the clients of the users are expected to listen to it by the following.\r\n\r\n    socket.on('new-post', function(data) {\r\n      //do something with data\r\n    });\r\n\r\nExtension to JSON format\r\n------------------------\r\n\r\nSometimes, we want to encode JavaScript objects in JSON.\r\nWe have a special notion for `Date` and `RegExp` like the following.\r\n\r\n    {\"key1\":\"val1\",\"key2\":\"/Date(12345)/\"} //12345 is milliseconds\r\n\r\n    {\"key3\":\"val3\",\"key4\":\"/RegExp([A-Z][a-z]+)/\"}\r\n\r\nDefining Object Types\r\n---------------------\r\n\r\nThe examples above are all about the post object.\r\nYou can define any objects and their routes in an SCB option.\r\n\r\n    routes: [{\r\n      object_type: 'user',\r\n      object_prefix: '/rest/users'\r\n    }, {\r\n      object_type: 'group',\r\n      object_prefix: '/rest/groups'\r\n    }, {\r\n      object_type: 'article',\r\n      object_prefix: '/rest/articles'\r\n    }, {\r\n      object_type: 'comment',\r\n      object_prefix: '/rest/comments'\r\n    }, {\r\n      object_type: 'like',\r\n      object_prefix: '/rest/likes'\r\n    }]\r\n\r\nHowever, keeping `user` and `group` objects are always required for\r\nauthentication and authorization.\r\n\r\nIf you want to create a unique index, you can define it in an SCB option.\r\n\r\n    ensure_unique_index: {\r\n      object_type: 'like',\r\n      object_fields: ['owner', 'article_id']\r\n    }\r\n\r\nThis will restrict one \"like\" at most for one article for each user.\r\n\r\nTODOs\r\n-----\r\n\r\n* Notification: email\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}